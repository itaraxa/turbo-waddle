// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/itaraxa/turbo-waddle/internal/storage (interfaces: OrderStorager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	postgres "github.com/itaraxa/turbo-waddle/internal/database/postgres"
	log "github.com/itaraxa/turbo-waddle/internal/log"
	models "github.com/itaraxa/turbo-waddle/internal/models"
	decimal "github.com/shopspring/decimal"
)

// MockOrderStorager is a mock of OrderStorager interface.
type MockOrderStorager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStoragerMockRecorder
}

// MockOrderStoragerMockRecorder is the mock recorder for MockOrderStorager.
type MockOrderStoragerMockRecorder struct {
	mock *MockOrderStorager
}

// NewMockOrderStorager creates a new mock instance.
func NewMockOrderStorager(ctrl *gomock.Controller) *MockOrderStorager {
	mock := &MockOrderStorager{ctrl: ctrl}
	mock.recorder = &MockOrderStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorager) EXPECT() *MockOrderStoragerMockRecorder {
	return m.recorder
}

// GetNotProcessedOrders mocks base method.
func (m *MockOrderStorager) GetNotProcessedOrders(arg0 context.Context, arg1 log.Logger) ([]postgres.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotProcessedOrders", arg0, arg1)
	ret0, _ := ret[0].([]postgres.OrderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotProcessedOrders indicates an expected call of GetNotProcessedOrders.
func (mr *MockOrderStoragerMockRecorder) GetNotProcessedOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotProcessedOrders", reflect.TypeOf((*MockOrderStorager)(nil).GetNotProcessedOrders), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockOrderStorager) GetOrders(arg0 context.Context, arg1 log.Logger, arg2 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderStoragerMockRecorder) GetOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderStorager)(nil).GetOrders), arg0, arg1, arg2)
}

// LoadOrder mocks base method.
func (m *MockOrderStorager) LoadOrder(arg0 context.Context, arg1 log.Logger, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrder indicates an expected call of LoadOrder.
func (mr *MockOrderStoragerMockRecorder) LoadOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrder", reflect.TypeOf((*MockOrderStorager)(nil).LoadOrder), arg0, arg1, arg2, arg3)
}

// UpdateOrder mocks base method.
func (m *MockOrderStorager) UpdateOrder(arg0 context.Context, arg1 log.Logger, arg2, arg3 string, arg4 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderStoragerMockRecorder) UpdateOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderStorager)(nil).UpdateOrder), arg0, arg1, arg2, arg3, arg4)
}
